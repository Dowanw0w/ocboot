- name: Create directory for containerd
  file:
    path: /opt/yunion/bin
    state: directory
    mode: '0755'

- name: Check containerd version
  shell: |
    /opt/yunion/bin/containerd --version
  register: containerd_output
  ignore_errors: yes
  failed_when: false

- debug: var=containerd_output.stdout

- name: get ctr status
  set_fact:
    containerd_ready: true
  when:
    - containerd_output.rc == 0
    - containerd_output.stdout | length > 0

- debug: var=containerd_ready

- name: get crictl status
  shell: crictl --version
  register: crictl_output
  ignore_errors: yes
  failed_when: false

- name: gather os specific variables
  include_vars: "defaults.yml"

- block:
  - name: Download containerd package
    ansible.builtin.get_url:
      url: "{{ containerd_url }}"
      dest: "/tmp/{{ containerd_package_name }}.tar.gz"
      mode: '0644'

  - name: ensure tar package
    package:
      name: tar
      state: present

  - name: Copy package to remote machine
    shell: |
      pkg=/tmp/{{ containerd_package_name }}.tar.gz
      tar xzf $pkg -C /opt/yunion/ && rm -rf $pkg
      [ -x /opt/yunion/bin/ctr ] && [ ! -x /usr/bin/ctr ] && ln -sf /opt/yunion/bin/ctr /usr/bin/
      ctr --version
    become: yes
    args:
      executable: /bin/bash
    register: extract_bin

  - debug: var=extract_bin.stdout_lines

  when:
  - containerd_ready | default(false) == false

- block:
  - name: Download crictl package
    ansible.builtin.get_url:
      url: "{{ crictl_url }}"
      dest: "/tmp/{{ crictl_package_name }}.tar.gz"
      mode: '0644'

  - name: Copy package to remote machine
    shell: |
      pkg=/tmp/{{ crictl_package_name }}.tar.gz
      tar xzf $pkg -C /usr/bin/ && rm -rf $pkg
      crictl --version
    become: yes
    args:
      executable: /bin/bash
    register: extract_bin

  when:
  - crictl_output.rc != 0 or  crictl_output.stdout | length == 0

# ensure runc
# runc_url: https://iso.yunion.cn/binaries/runc/releases/download/v1.1.12/runc.{{ ansible_architecture }}
# runc_package_name: runc

- name: get runc status
  shell: runc --version
  register: runc_output
  ignore_errors: yes
  failed_when: false

- debug: var=runc_output.stdout

- name: set runc status
  set_fact:
    runc_ready: true
  when:
    - runc_output.rc == 0
    - runc_output.stdout | length > 0

- block:
  - name: Download runc package
    ansible.builtin.get_url:
      url: "{{ runc_url }}"
      dest: "/tmp/{{ runc_package_name }}"
      mode: '0755'

  - name: Copy package to remote machine
    shell: |
      mkdir -p /usr/local/bin
      mv /tmp/{{ runc_package_name }} /usr/local/bin
      runc --version
    become: yes
    args:
      executable: /bin/bash
    register: runc_bin

  - debug: var=runc_bin.stdout_lines

  when:
  - runc_ready | default(false) == false

- name: ensure ocnet_cni
  shell: |
    set -e
    bin=/opt/cni/bin/{{ ocnet_cni_package_name }}
    [[ -s "$bin" ]] && [[ -x "$bin" ]] && ls -lah "$bin" && exit 0
    mkdir -p /opt/cni/bin/
    if hash wget &>/dev/null; then
      wget --quiet {{ ocnet_cni_url }} -O "$bin"
    elif hash curl &>/dev/null; then
      curl --silent {{ ocnet_cni_url }} -o "$bin"
    fi
    chmod a+x "$bin"
    "$bin" --version
    ls -lah "$bin"
  register: ocnet_cni_output
  ignore_errors: yes
  failed_when: false
  become: yes
  args:
    executable: /bin/bash

- debug: var=ocnet_cni_output.stdout_lines
